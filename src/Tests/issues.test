<?php

namespace Drupal\g2\Tests;

use Drupal\Core\Session\AccountInterface;
use Drupal\g2\G2;

/**
 * Class G2IssuesTest contains G2 non-regression tests.
 *
 * Test once-fixed issues to catch regressions.
 *
 * @group G2
 */
class G2IssuesTest extends DrupalWebTestCase {

  use \Drupal\Core\StringTranslation\StringTranslationTrait;

  /**
   * The name of the test group.
   *
   * @var string
   */
  static public $group = 'Initialization';

  /**
   * Admin account, used for privileged operations.
   *
   * @var object
   */
  public $admin;

  /**
   * {@inheritdoc}
   *
   * Note: no "create|delete|edit [own|any] g2_entry content": G2 6.1 assumes a
   * single author with full admin permissions for its content.
   */
  public function setUp() {
    parent::setUp('taxonomy', 'g2');
    $this->admin = $this->drupalCreateUser(['access content', G2::PERM_ADMIN]);
    $this->root = $this->drupalCreateUser(module_invoke_all('perm'));
  }

  /**
   * Helper for the filter test.
   *
   * @param string $format_name
   *   The name of a format.
   * @param string $filter_name
   *   The name of a filter.
   *
   * @return int|null|string
   *   The format number.
   */
  public function createG2Format($format_name, $filter_name) {
    $this->drupalLogin($this->root);

    $edit = [
      'name' => $format_name,
      "filters[$filter_name]" => 1,
    ];
    $roles = user_roles();
    foreach ($roles as $rid => $role) {
      if (!in_array($rid, [
        AccountInterface::ANONYMOUS_ROLE,
        AccountInterface::AUTHENTICATED_ROLE,
      ])) {
        $edit["roles[$rid]"] = 1;
      }
    }

    $this->drupalPost('admin/settings/filters/add', $edit,
      $this->t('Save configuration'));
    $this->assertResponse(200,
      $this->t('Created new format %format including filter %filter', [
        '%format' => $edit['name'],
        '%filter' => $filter_name,
      ]), self::$group);
    $formats = filter_formats();
    $ret = NULL;
    foreach ($formats as $fid => $format) {
      // @todo or label() ?
      if ($format->id() == $format_name) {
        $ret = $fid;
        break;
      }
    }
    $this->assertTrue(is_numeric($ret) && $ret > 0,
      $this->t('Valid format number %fid allocated to %name format', [
        '%fid' => $ret,
        '%name' => $format_name,
      ]));
    return $ret;
  }

  /**
   * HTML test being generated in the "title" attribute on node auto-creation.
   */
  public function test1243170version7() {
    variable_set(G2::VARREMOTEG2, '<local>');
    variable_set(G2::VARTOOLTIPS, TRUE);

    // Default format on testing profile.
    $format_name = 'Text with G2 format';
    $filter_name = 'g2/0';
    $fid = $this->createG2Format($format_name, $filter_name);

    $settings = [
      'type' => G2::BUNDLE,
      'title' => 'CSS',
      'body' => 'A style language for <dfn>HTML</dfn>',
      'format' => $fid,
    ];
    $node = $this->drupalCreateNode($settings);

    self::$group = $this->t('User interaction');
    $this->drupalLogin($this->admin);
    $this->drupalGet("node/$node->nid");
    $this->assertLink('HTML', 0, $this->t('Found G2 "HTML" link on node page'),
      self::$group);
    $link = $this->xpath("//a[@class='g2-dfn-link']");
    if (empty($link)) {
      return;
    }

    $attributes = $link[0]->attributes();
    $href = (string) $attributes['href'];
    $this->drupalGet($href);
    $this->assertLink('create', 0,
      $this->t('Found G2 "create" link on g2/entries/HTML'), self::$group);
    $link = $this->xpath('//a[text()="create"]');
    if (empty($link)) {
      return;
    }

    $attributes = $link[0]->attributes();
    $href = (string) $attributes['href'];
    $this->assertEqual($href, url('node/add/g2-entry/HTML'),
      $this->t('Found G2 node creation link on g2/entries/HTML'), self::$group);
  }

}
